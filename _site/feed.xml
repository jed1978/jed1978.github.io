<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-Hant"><generator uri="https://jekyllrb.com/" version="3.8.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-Hant" /><updated>2018-04-25T21:43:25+08:00</updated><id>http://localhost:4000/</id><title type="html">Jed’s blog</title><subtitle>寫程式是一件快樂的事，期許自己可以一輩子都能享受這種快樂
</subtitle><author><name>Jed Lin</name></author><entry><title type="html">學習敏捷系列 - Daily Scrum</title><link href="http://localhost:4000/2018/01/20/Agile-Scrum-Ceremonies-DailyScrum.html" rel="alternate" type="text/html" title="學習敏捷系列 - Daily Scrum" /><published>2018-01-20T00:00:00+08:00</published><updated>2018-01-20T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/20/Agile-Scrum-Ceremonies-DailyScrum</id><content type="html" xml:base="http://localhost:4000/2018/01/20/Agile-Scrum-Ceremonies-DailyScrum.html">&lt;p&gt;我參與過很多次的傳統瀑布流專案進度匯報會議，不帶杯咖啡進去真的很容易睡著，還好現在有了智慧型手機可以刷FB…(大誤)。&lt;/p&gt;

&lt;p&gt;以我的理解，專案進度匯報會議是比較偏單向的，資訊從一方流向另一方：讓團隊或PM(或PM的老闆)得到最新訊息，接下來PM(或PM的老闆…XD)可能會依專案的狀態進行一些工作項目跟資源上的調度，目的是控制好專案進度，以免造成延遲。&lt;/p&gt;

&lt;p&gt;但Daily Scrum的本質不太一樣，我傾向這樣描述它：
&lt;!--more--&gt;
類似系統開機時的自檢，緊接著載入要執行的工作項目，並檢視周邊支援設備是否有異常，如有則必須優先排除以讓工作順利進行。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;從上一次Daily Scrum到現在我做了什麼?&lt;/li&gt;
  &lt;li&gt;接下來我要做什麼?&lt;/li&gt;
  &lt;li&gt;我遇到了什麼障礙無法前進?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這3個問題形成了一個大致上以天為單位的Feedback loop。藉由頻繁的系統自檢，如果整個開發工作出了問題，比較容易地在問題發生初期就解決它。&lt;/p&gt;

&lt;p&gt;舉例來說：負責需求分析的同事認為他前一天承諾的工作已經結束可以進行下一個需求分析，但另一個準備接手開發的同事並不是這樣想的，他還需要釐清一些細節，而這些細節必須有另一位同事協助。在Daily Scrum短短的15分鐘裡充分揭露這些資訊，就能在結束後進行有效的後續討論。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;call for help + I can help + I’m interested + something is different from our expected
-Joey 91 replied in FB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2018.1.20 以上是我原本發在FB的一篇感想文，之後在準備內訓教材時，覺得有些值得補充的地方，所以整理成這篇文章發在部落格。(話說好久沒發文了…XD)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;以積極的個人來建構專案，給予他們所需的環境與支援，並信任他們可以完成工作。&lt;/li&gt;
    &lt;li&gt;面對面的溝通是傳遞資訊給開發團隊及團隊成員之間效率最高且效果最佳的方法。&lt;/li&gt;
    &lt;li&gt;團隊定期自省如何更有效率，並據之適當地調整與修正自己的行為。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;這是12條敏捷宣言中的其中3條，Daily Scrum不就正好對應到這3條原則嗎? 對管理層來說，專案的Transparency很重要，故專案管理的手段常見定期的團隊專案進度匯報會議，但以敏捷的精神來說，Daily Scrum無疑是更靈活的方式，而且不僅僅如此，如同91在FB的回應，團隊成員會逐漸學習到承諾、責任與互相信任，從Working Group昇華成為真正意義上的Team。&lt;/p&gt;

&lt;p&gt;學習敏捷只看具體實踐常會讓人感到困惑，唯有深入原則與價值觀才能真正理解與認同敏捷。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.rawgit.com/jed1978/blog-images/55333eee/agile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Agile" /><category term="Scrum" /><category term="DailyScrum" /><summary type="html">我參與過很多次的傳統瀑布流專案進度匯報會議，不帶杯咖啡進去真的很容易睡著，還好現在有了智慧型手機可以刷FB…(大誤)。 以我的理解，專案進度匯報會議是比較偏單向的，資訊從一方流向另一方：讓團隊或PM(或PM的老闆)得到最新訊息，接下來PM(或PM的老闆…XD)可能會依專案的狀態進行一些工作項目跟資源上的調度，目的是控制好專案進度，以免造成延遲。 但Daily Scrum的本質不太一樣，我傾向這樣描述它：</summary></entry></feed>