<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-Hant"><generator uri="https://jekyllrb.com/" version="3.8.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-Hant" /><updated>2018-10-06T23:19:26+08:00</updated><id>http://localhost:4000/</id><title type="html">Jed’s blog</title><subtitle>寫程式是一件快樂的事，期許自己可以一輩子都能享受這種快樂
</subtitle><author><name>Jed Lin</name></author><entry><title type="html">Disruptor.Net - IEventTranslator</title><link href="http://localhost:4000/2018/10/06/Disruptor-Net-IEventTranslator.html" rel="alternate" type="text/html" title="Disruptor.Net - IEventTranslator" /><published>2018-10-06T00:00:00+08:00</published><updated>2018-10-06T00:00:00+08:00</updated><id>http://localhost:4000/2018/10/06/Disruptor-Net-IEventTranslator</id><content type="html" xml:base="http://localhost:4000/2018/10/06/Disruptor-Net-IEventTranslator.html">&lt;h1 id=&quot;ieventtranslator&quot;&gt;IEventTranslator&lt;/h1&gt;

&lt;p&gt;IEventTranslator是在第3版發布的新功能，這篇文章是介紹使用的方式及設計理念&lt;/p&gt;

&lt;h2 id=&quot;生產者發送事件到ringbuffer&quot;&gt;生產者發送事件到RingBuffer&lt;/h2&gt;

&lt;p&gt;事件驅動的一個特性就是透過發送事件給關注的訂閱者，進而讓多個不同的業務邏輯得以實現，以Disruptor的設計，就是要透過&lt;code class=&quot;highlighter-rouge&quot;&gt;RingBuffer.Publish()&lt;/code&gt;這個方法把事件放入RingBuffer，後面的EventHandler則會依據其掛載的順序，由&lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceBarrier&lt;/code&gt;調度執行。&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;在較早期的版本與範例程式碼，發送Event都是先呼叫&lt;code class=&quot;highlighter-rouge&quot;&gt;RingBuffer.Next()&lt;/code&gt;取得最新可用的sequence，然後依sequence取得指定的slot中的物件，設定完要傳遞的屬性後，要再呼叫&lt;code class=&quot;highlighter-rouge&quot;&gt;RingBuffer.Publish()&lt;/code&gt;方法把事件發送出去，大致如以下的程式碼。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但這段程式碼有個問題，假如先取得了sequence，但在Publish之前發生Exception會發生什麼事?&lt;/p&gt;

&lt;h2 id=&quot;停滯的ringbuffer&quot;&gt;停滯的RingBuffer&lt;/h2&gt;

&lt;p&gt;RingBuffer因其特殊的設計，在使用上比傳統的Queue來的複雜，這段程式碼如果不加上try catch/finally，確保最終要把這個sequence發布到RingBuffer，將造成整個RingBuffer停滯不前，必須重啟才能恢復，這在MultiProducer特別容易發生，對一個In-Memory Transaction系統來說，是個非常致命的問題。&lt;/p&gt;

&lt;p&gt;所以這段程式碼必須要改成這樣，因而增加了程式碼的複雜度&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因此在第3版的Disruptor，LMAX的團隊為簡化這些使用上的複雜性，有了新的&lt;code class=&quot;highlighter-rouge&quot;&gt;RingBuffer.PublishEvent()&lt;/code&gt;及對應的&lt;code class=&quot;highlighter-rouge&quot;&gt;IEventTranslator&lt;/code&gt;系列介面。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishEvent()&lt;/code&gt;已內建了try catch/finally，只要實作&lt;code class=&quot;highlighter-rouge&quot;&gt;IEventTranslator&lt;/code&gt;介面，就可以不再需要自己處理這段程式碼，發送事件只要一行程式碼就可以搞定了。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PublishEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Translator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程式碼更簡潔，此外也帶來其他額外的好處，EventTranslator很容易撰寫單元測試，也可以依據需求撰寫各種不同的EventTranslator進行抽換。&lt;/p&gt;

&lt;h2 id=&quot;從設計的角度來看eventtranslator&quot;&gt;從設計的角度來看EventTranslator&lt;/h2&gt;

&lt;p&gt;DDD有一個很核心的概念叫Bounded Context，意思是整個Domain可以被劃分出不同的Domain，各有各自的邊界，同樣的事件在不同的Context可能被賦與不同的意義，而不同的Context會有上下游的協作方式，中間可能透過各種方式協作。&lt;/p&gt;

&lt;p&gt;而以事件驅動的設計理念，上下游的Context透過事件進行協作，此時單純的以&lt;code class=&quot;highlighter-rouge&quot;&gt;.Publish()&lt;/code&gt;發送事件就有可能發生一個問題，不同的Context定義的相同事件內容並不完全一致，且隨著需求演變，事件攜帶的資訊可能也需要擴展，有時為了一些相容性(已儲存的事件結構與新的不同)，就會有一些做法容易造成程式碼腐化，而&lt;code class=&quot;highlighter-rouge&quot;&gt;EventTranslator&lt;/code&gt;的出現，很好的解決了這個問題。&lt;/p&gt;

&lt;h2 id=&quot;使用方式&quot;&gt;使用方式&lt;/h2&gt;

&lt;p&gt;IEventTranslator有多個多載，可以依需求決定實作哪一個介面&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IEventTranslatorOneArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEventTranslatorTwoArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEventTranslatorThreeArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEventTranslatorVararg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用的方法都一樣，最後我附上一個實作&lt;code class=&quot;highlighter-rouge&quot;&gt;IEventTranslatorTwoArg&lt;/code&gt;的Producer程式碼，應該很容易理解如何使用。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RingBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RingBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_ringBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PublishEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Translator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Translator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEventTranslatorTwoArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayloadInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Translator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Translator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Translator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TranslateTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayloadInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderPlaced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jed Lin</name></author><category term="Disruptor" /><category term="IEventTranslator" /><category term="Event Driven" /><summary type="html">IEventTranslator IEventTranslator是在第3版發布的新功能，這篇文章是介紹使用的方式及設計理念 生產者發送事件到RingBuffer 事件驅動的一個特性就是透過發送事件給關注的訂閱者，進而讓多個不同的業務邏輯得以實現，以Disruptor的設計，就是要透過RingBuffer.Publish()這個方法把事件放入RingBuffer，後面的EventHandler則會依據其掛載的順序，由SequenceBarrier調度執行。</summary></entry><entry><title type="html">Redis系列 - C#存取Redis (下)</title><link href="http://localhost:4000/2018/05/20/Redis-Programming-CSharp-Basic-3.html" rel="alternate" type="text/html" title="Redis系列 - C#存取Redis (下)" /><published>2018-05-20T00:00:00+08:00</published><updated>2018-05-20T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/20/Redis-Programming-CSharp-Basic-3</id><content type="html" xml:base="http://localhost:4000/2018/05/20/Redis-Programming-CSharp-Basic-3.html">&lt;h1 id=&quot;c存取redis---timeout-trouble-shooting&quot;&gt;C#存取Redis - Timeout trouble shooting&lt;/h1&gt;

&lt;p&gt;這一篇是討論Timeout trouble shooting為主，有一些基礎知識不再贅述，請參考本人之前的文章。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/05/02/Redis-Environment-Installation-Configuration.html&quot;&gt;Redis系列 - 環境建置篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/05/11/Redis-Programming-CSharp-Basic-1.html&quot;&gt;Redis系列 - C#存取Redis (上)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/05/13/Redis-Programming-CSharp-Basic-2.html&quot;&gt;Redis系列 - C#存取Redis (中)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.TimeoutException&lt;/code&gt;是很常看到的Exception之一，發生的時候會看到類似這樣的錯誤訊息:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeoutException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timeout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MGET&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2728&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc84&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;406&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3f962419f641&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IOCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WORKER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8184&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8191&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個錯誤訊息跟StackExchange.Redis的sync timout設定值有很直接的關聯，預設值是1000 ms。&lt;/p&gt;

&lt;p&gt;sync time是指從發送同步request到收到response的時間，不能超過sync timeout的設定值。&lt;/p&gt;

&lt;p&gt;大部份的情況都很夠用了，但如果有以下幾類狀況就有可能引發這個Exception。&lt;/p&gt;

&lt;h2 id=&quot;high-cpu-usagememory-pressurenetwork-latency&quot;&gt;High CPU usage/Memory pressure/Network latency&lt;/h2&gt;

&lt;p&gt;這一類屬於環境問題。&lt;/p&gt;

&lt;p&gt;CPU or Memory使用率過高是屬於CPU bound的問題，會影響執行StackExchange.Redis的Thread無法獲得CPU資源，進而發生Timeout。CPU是直接影響，而Memory是因為CLR的Garbage Collection機制，當開始GC時會暫停所有工作。對Redis server來說，很可能發送出去的指令早就已經被處理完成並回傳了，卻因為上述情形，造成處理時間最終超過sync timeout的設定值。&lt;/p&gt;

&lt;p&gt;Network latency則是I/O bound，網路環境如果不是很穩定，比如跨Internet存取Redis，可能某個路由節點不穩定讓網路延遲變成500ms，request+response來回就是1000ms，那麼就會發生timeout了。若是屬於跨網路存取的高延遲，可以考慮將&lt;code class=&quot;highlighter-rouge&quot;&gt;Sync timeout&lt;/code&gt;的設定值調高一些。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:6379, synctimeout=1500&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;burst-traffic&quot;&gt;Burst Traffic&lt;/h2&gt;

&lt;p&gt;瞬間流量暴增，這個狀況就要先談一下CLR的ThreadPool跟IOCP/WORKER之間的關係。&lt;/p&gt;

&lt;p&gt;CLR的ThreadPool有2種類型的執行緒(Thread)，一種是&lt;code class=&quot;highlighter-rouge&quot;&gt;IOCP(I/O Completion Port) thread&lt;/code&gt;，另一種就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker thread&lt;/code&gt;，這2類其實都是thread，只是Worker thread是給一般非同步工作用的，而IOCP thread是另外保留給非同步I/O執行時使用的。&lt;/p&gt;

&lt;p&gt;ThreadPool在管理這些threads時，有一個&lt;code class=&quot;highlighter-rouge&quot;&gt;MinThreads&lt;/code&gt;的設定，預設值取決於有多少個CPU core，例如有4個CPU core，則預設有4條Worker threads與4條IOCP threads。&lt;/p&gt;

&lt;p&gt;底下這段程式可以看到系統實際的狀況&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minWorkerThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minIOCPThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logicCores&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessorCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ThreadPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetMinThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minWorkerThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minIOCPThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Cores: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logicCores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Minimum Worker threads: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minWorkerThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Minimum IOCP threads: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minIOCPThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個設定值的意思是，如果目前的Busy Threads = MinThreads時，ThreadPool就會開始建立並注入新的可用thread到ThreadPool裡。&lt;/p&gt;

&lt;p&gt;實際運行的時候，假設需要一個IOCP thread，而ThreadPool內有可用的thread，就會立刻配出去使用。但&lt;strong&gt;&lt;em&gt;如果目前的Busy Threads = Min Threads，就會讓這個請求進入排隊等候，等待&lt;code class=&quot;highlighter-rouge&quot;&gt;500ms&lt;/code&gt;後依然沒有可用的thread，就會注入一條新的thread給目前排隊的第一順位請求&lt;/em&gt;&lt;/strong&gt;，而始終閒置的thread則在15秒後會被釋放。&lt;/p&gt;

&lt;p&gt;看到這邊有沒有發現問題了? 由於預設的最小Worker/IOCP threads不足以服務大量湧入的請求，就會需要等待500ms才能在ThreadPool拿到可用的thread，在這個狀況下很有機會因等待建立新thread而發生Timeout exception。&lt;/p&gt;

&lt;p&gt;如果StackExchange.Redis是用在Web，則會使用IIS的預設值，基本上是沒什麼問題的，如果要自行控制得要修改machine.config。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;processModel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoConfig=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minWorkerThreads=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minIoThreads=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若為Windows Service或其他非掛載於IIS的Service，就要注意ThreadPool.MinThreads是否有依實際的狀況調整適當的初始值。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minWorkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minIOCPs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ThreadPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetMinThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minWorkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minIOCPs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個狀況可以觀察幾個指標，首先看&lt;code class=&quot;highlighter-rouge&quot;&gt;IOCP&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKER&lt;/code&gt;裡的&lt;code class=&quot;highlighter-rouge&quot;&gt;Busy&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;Min&lt;/code&gt;，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;Busy&lt;/code&gt;&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Min&lt;/code&gt;就表示有可能是ThreadPool的設定值並沒有為流量做最佳化。&lt;/p&gt;

&lt;h2 id=&quot;large-requestresponse-size&quot;&gt;Large Request/Response size&lt;/h2&gt;

&lt;p&gt;實務上這個應該是最常遇到的，因為跟資料結構的設計有最直接的關係。&lt;/p&gt;

&lt;p&gt;假設Sync timeout設為1000，同時有2個request需要讀取Key A與Key B的value，因為StackExchange.Redis的Multiplexer機制是共用connection，當使用pipeline機制發出這2個request時會連續發送而不會等待前一個response，而Redis server則會依發送的順序，依序回傳Response。&lt;/p&gt;

&lt;p&gt;此時如果response的data size很大，傳輸的時間就有可能超過設定的time out時間，引發Timeout exception，如下圖所示：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-------- 1 Second Timeout &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;|
|-Request A-|
     |-------- 1 Second Timeout &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;|
     |-Request B-|
            |- Read Response A &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;|
                                       |- Read Response B-| &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;TIMEOUT&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個狀況是Client讀取回傳的response A，這時request A + response A的時間還在1秒內，所以request A正常結束，但讀取Response B因為要等Response A讀取完成，這時request B的時間是要再&lt;strong&gt;加上等待讀取response A完成的時間&lt;/strong&gt;，而不是只有加上讀取Response B的時間就好。&lt;/p&gt;

&lt;p&gt;這個data size的設計跟MTU有關。MTU是網卡的最大傳輸單元，Ethernet的預設值通常是1500 bytes，當超過這個值的時候就會被拆成不同的封包傳送，且若發生封包碰撞則必須重傳，這是TCP/IP的協議規範之一。&lt;/p&gt;

&lt;p&gt;Redis的value資料長度如果大於MTU，表示在TCP傳輸的時候要分成多個封包進行傳輸，不但會大幅降低Redis的throughput，大到一定程度後還會發生timeout exception。&lt;/p&gt;

&lt;p&gt;如果是屬於這個狀況，就要想辦法調整儲存的資料結構，把一個大的key/value拆成好幾個小的key/value，或以Hash的結構存放，個人的建議是儘可能的讓單個key/value可以小於1KB，以本人實測的結果，1KB的資料長度是throughput最高的。&lt;/p&gt;

&lt;h2 id=&quot;commands-taking-long-time-to-process-on-redis-server&quot;&gt;Commands taking long time to process on Redis server&lt;/h2&gt;

&lt;p&gt;最後一個狀況就是執行的指令在Redis跑的太久了，比如跑了一個寫的很爛的Lua script，或是下了會造成blocking的指令，如&lt;code class=&quot;highlighter-rouge&quot;&gt;MGET&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;KEYS&lt;/code&gt;…等。&lt;/p&gt;

&lt;p&gt;這要連到Server上執行&lt;code class=&quot;highlighter-rouge&quot;&gt;slowlog&lt;/code&gt;指令，列出執行效率低落的指令才能進行調校。&lt;/p&gt;

&lt;p&gt;這類型的問題比較有效的解決方式還是靠code review、pair programming跟training的方式，協助團隊內不熟悉Redis的工程師儘快熟悉，避免寫出不好的程式碼。&lt;/p&gt;

&lt;h2 id=&quot;錯誤訊息代碼說明&quot;&gt;錯誤訊息代碼說明&lt;/h2&gt;

&lt;p&gt;另外關於StackExchange.Redis的錯誤訊息，裡面有很多縮寫代碼，Microsoft Azure有整理了一份代碼的說明表格。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/investigating-timeout-exceptions-in-stackexchange-redis-for-azure-redis-cache/&quot; target=&quot;_blank&quot;&gt;StackExchange.Redis Timeout Exception Error Code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;小結&quot;&gt;小結&lt;/h2&gt;

&lt;p&gt;這篇算是C#存取Redis很重要的一個部份，很多人常會卡在timeout exception要如何處理，其實很多時候都是一些基礎知識，掌握好基礎後，處理這些問題就變的很輕鬆了。&lt;/p&gt;

&lt;p&gt;這篇原則上還是把範圍限縮在Client端，畢竟主題是講C#存取Redis，之後有機會再整理Server端的問題排查就會更全面了。&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Redis" /><category term="C#" /><category term="StackExchange.Redis" /><category term="Trouble Shooting" /><summary type="html">C#存取Redis - Timeout trouble shooting 這一篇是討論Timeout trouble shooting為主，有一些基礎知識不再贅述，請參考本人之前的文章。 Redis系列 - 環境建置篇 Redis系列 - C#存取Redis (上) Redis系列 - C#存取Redis (中)</summary></entry><entry><title type="html">Redis系列 - C#存取Redis (中)</title><link href="http://localhost:4000/2018/05/13/Redis-Programming-CSharp-Basic-2.html" rel="alternate" type="text/html" title="Redis系列 - C#存取Redis (中)" /><published>2018-05-13T00:00:00+08:00</published><updated>2018-05-13T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/13/Redis-Programming-CSharp-Basic-2</id><content type="html" xml:base="http://localhost:4000/2018/05/13/Redis-Programming-CSharp-Basic-2.html">&lt;h1 id=&quot;c存取redis&quot;&gt;C#存取Redis&lt;/h1&gt;

&lt;p&gt;延續上一篇&lt;a href=&quot;/2018/05/11/Redis-Programming-CSharp-Basic-1.html&quot;&gt;Redis系列 - C#存取Redis (上)&lt;/a&gt;，這篇文章會說明Redis的簡易Publish/Subscribe、Lua script的基礎知識。&lt;/p&gt;

&lt;h2 id=&quot;publishsubscribe&quot;&gt;PUBLISH/SUBSCRIBE&lt;/h2&gt;

&lt;p&gt;Redis的PUB/SUB是很簡易的訊息機制，並不像一些專門的Message Middleware(例如RabbitMQ、ActiveMQ)提供很多豐富的功能，比如它就不保證訊息發送後一定不會遺失，但因為附帶的這個功能實在太方便了，實務上還是經常使用到。&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;StackExchange.Redis對PUB/SUB的支援很完整，範例程式碼如下&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RedisConnection&lt;/code&gt;的程式碼請參考&lt;a href=&quot;/2018/05/11/Redis-Programming-CSharp-Basic-1.html&quot;&gt;Redis系列 - C#存取Redis (上)&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;stackexchangeredis-pubsub-範例程式碼&quot;&gt;StackExchange.Redis PUB/SUB 範例程式碼&lt;/h3&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd hh:mm:ss.fff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Subscribed channel topic.test &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd hh:mm:ss.fff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Received message &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd hh:mm:ss.fff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Published message to channel topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;執行結果:&lt;/strong&gt;
&lt;img src=&quot;/assets/images/pub-sub-screenshot-1.jpg&quot; alt=&quot;Pub/Sub result&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pubsub的實作結構特性&quot;&gt;PUB/SUB的實作結構特性&lt;/h3&gt;

&lt;p&gt;使用Redis的PUB/SUB要注意幾件事，同樣的Channel如果不先呼叫&lt;code class=&quot;highlighter-rouge&quot;&gt;Unsubscribe()&lt;/code&gt;就呼叫&lt;code class=&quot;highlighter-rouge&quot;&gt;Subscribe()&lt;/code&gt;，每Publish一次就會收到重覆的message。&lt;/p&gt;

&lt;p&gt;這是因為Channel在Redis的實作上是一個Dictionary的結構，Key值是Channel，Value是一個Linked List，這個Linked List存的是有訂閱這個Channel的Client Id，因此每呼叫一次&lt;code class=&quot;highlighter-rouge&quot;&gt;Subscribe()&lt;/code&gt;，就會往這個Linked List增加一個Client Id。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
    subgraph channel
        A(topic.test.1)--&amp;gt;B
        subgraph linked clients
            B--&amp;gt;B1
            B1--&amp;gt;B2
            B2--&amp;gt;B3
        end
        C(topic.test.2)--&amp;gt;D
        subgraph linked clients
            D--&amp;gt;D1
            D1--&amp;gt;D2
            D2--&amp;gt;D3
        end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由於使用Linked List的關係，訊息傳遞的時間複雜度是O(N)，如果同一個Channel有很多個Subscriber，排愈後面的Subscriber就會愈慢收到，但這個問題可以用多個Channel來解決。&lt;/p&gt;

&lt;h3 id=&quot;非同步的訊息順序問題&quot;&gt;非同步的訊息順序問題&lt;/h3&gt;

&lt;p&gt;另外StackExchange.Redis預設也提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;Publish()&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishAsync()&lt;/code&gt;，但實際呼叫時會發現結果似乎是一樣的&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PublishAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd hh:mm:ss.fff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Published message to channel topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;執行結果:&lt;/strong&gt;
&lt;img src=&quot;/assets/images/pub-sub-screenshot-2.jpg&quot; alt=&quot;Pub Async result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是因為StackExchange.Redis預設是讓訊息的發送與接收在同一個Connection維持一致的順序，這像是queue的概念，這樣做的好處是有利於簡化訊息的處理順序問題，但缺點是必須一個一個的發送與接收，如果訊息量較大時，就會造成delay。&lt;/p&gt;

&lt;p&gt;因此若不需要關心每個訊息的處理順序，可以調整一個設定值，讓&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishAsync()&lt;/code&gt;發揮非同步的能力&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreserveAsyncOrder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PublishAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd hh:mm:ss.fff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Published message to channel topic.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;執行結果:&lt;/strong&gt;
&lt;img src=&quot;/assets/images/pub-sub-async-screenshot.jpg&quot; alt=&quot;Pub Async result 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不限制非同步訊息的順序，會提昇訊息處理的Throughput，但就要自己控制訊息對系統狀態的影響。&lt;/p&gt;

&lt;h3 id=&quot;output-buffer-hard-limitsoft-limit對pubsub的影響&quot;&gt;Output buffer Hard limit/Soft limit對PUB/SUB的影響&lt;/h3&gt;

&lt;p&gt;最後還有一個Pub/Sub的坑要特別提一下，在使用Pub/Sub時，如果Publisher的發送量大於Subscriber的消化速度的話，會有機會被Redis關閉client端的連線。&lt;/p&gt;

&lt;p&gt;Redis對每一個連上來的client端都有一個output buffer的設定，這是因為Redis的In-memory處理速度太快，而Network的I/O處理太慢，因此需要一個緩衝區讓Redis處理完請求後先將結果放進去，就可以繼續處理下一個請求。&lt;/p&gt;

&lt;p&gt;Output buffer分成三種，預設值如下:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubsub&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到pubsub有特別獨立出來一個設定值，其中的32mb是&lt;code class=&quot;highlighter-rouge&quot;&gt;hard limit&lt;/code&gt;，8mb是&lt;code class=&quot;highlighter-rouge&quot;&gt;soft limit&lt;/code&gt;，60是soft limit的時間限制。這個設定值的意思是如果pubsub的訊息大於32mb時，Redis會立刻關閉該client的連線，8mb與60是指如果達到8mb且超過60s，就會關閉該client的連線。&lt;/p&gt;

&lt;h2 id=&quot;lua-script&quot;&gt;Lua script&lt;/h2&gt;

&lt;p&gt;Redis在2.6版就加入了對Lua script的支援，Lua script是一種非常簡單的腳本語言，被廣泛的用在很多軟體內做為內嵌語言，遊戲引擎內就很常看到它的出現。&lt;/p&gt;

&lt;p&gt;使用Lua script的好壞處都很明顯，個人覺得是有些兩面刃的味道，用的好可以完全發揮Redis的優點，用不好也可以徹底搞死Redis…。&lt;/p&gt;

&lt;h3 id=&quot;適用場景&quot;&gt;適用場景&lt;/h3&gt;

&lt;p&gt;還是要回到Redis的架構設計來看，因為單執行緒的設計，在運行Lua script的時候是沒辦法處理其他的請求的，所以Lua script並不能像Database的Stored Procedure一樣運行複雜的商務邏輯，它適用的場景是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;組合出Redis沒有支援的command&lt;/li&gt;
  &lt;li&gt;Atomic的資料操作&lt;/li&gt;
  &lt;li&gt;Transaction&lt;/li&gt;
  &lt;li&gt;避免多次請求來回浪費掉的round-trip network latency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;蠻多工程師一開始接觸Redis並不清楚這個部份，發現Lua script的一些優點後，就會把Lua script當成DB的SQL在用，寫了一堆Lua script像是在寫stored procedure，放了很多複雜的商業邏輯在內，在開發環境可能還不會遇到問題，但在上到正式環境後就陸續發生一大堆效能問題，這時要再緊急上的Patch就很容易出現其他的bug。&lt;/p&gt;

&lt;h3 id=&quot;stackexchangeredis-執行lua-script-範例程式碼&quot;&gt;StackExchange.Redis 執行Lua script 範例程式碼&lt;/h3&gt;

&lt;p&gt;使用StackExchange.Redis呼叫Lua script的方式有好幾種不同的方式，使用上都是大同小異。&lt;/p&gt;

&lt;p&gt;我寫了一個示範用的lua script，功能是先產生100筆key，然後依據查詢條件找出符合的key，這邊傳入的參數我用&lt;code class=&quot;highlighter-rouge&quot;&gt;@key&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;@value&lt;/code&gt;，稍後在C#的code就會用到了，請存成script.lua並放到你的專案中。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 這個迴圈會寫入100個key&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;set&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 呼叫 SCAN, 並依據傳入的key pattern與每次查詢筆數, 逐次讀取符合條件的key存入table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;repeat&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SCAN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MATCH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;COUNT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--排序後回傳結果&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;table.sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C#的部份我也寫了一個RunLuaScript()的私有靜態方法，請注意傳入的參數名稱&lt;code class=&quot;highlighter-rouge&quot;&gt;key = (RedisKey)&quot;test:*&quot;, value = 5&lt;/code&gt;，這必須跟Lua script接的&lt;code class=&quot;highlighter-rouge&quot;&gt;@key&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;@value&lt;/code&gt;同名，這是LuaScript class提供的功能，如果型別是&lt;code class=&quot;highlighter-rouge&quot;&gt;RedisKey&lt;/code&gt;的話，會幫你轉成&lt;code class=&quot;highlighter-rouge&quot;&gt;KEYS[]&lt;/code&gt;，否則的話轉成&lt;code class=&quot;highlighter-rouge&quot;&gt;ARGV[]&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;localhost:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RunLuaScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedisResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RunLuaScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDatabase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LuaScript&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadAllText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script.lua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EvaluateAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedisKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這段程式碼還有呼叫了&lt;code class=&quot;highlighter-rouge&quot;&gt;Load()&lt;/code&gt;，這會把Lua script先載入指定的Redis server，一般指定Master就可以了，會自動replicate到Slave。載入後會拿到一個SHA1 hash code，之後執行時只需傳入這個code，不需重傳整份Lua script，對需要頻繁執行的script有效能上的幫助。&lt;/p&gt;

&lt;h3 id=&quot;lua-script的debug方式&quot;&gt;Lua script的Debug方式&lt;/h3&gt;

&lt;p&gt;Lua script因為是運行在Redis上，所以在3.2版推出之前，Debug一直是比較麻煩的部份，但作者在3.2版提供了debug mode，方便開發人員在開發階段進行除錯。&lt;/p&gt;

&lt;p&gt;testDebug.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我寫了一個很簡單的Lua script並存成testDebug.lua，接下來要透過Redis-cli這支命令列程式來執行這個script，但參數加上&lt;code class=&quot;highlighter-rouge&quot;&gt;--ldb&lt;/code&gt;，這是告訴Redis接下來以debug模式執行這支Lua script。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; redis redis-cli &lt;span class=&quot;nt&quot;&gt;--ldb&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--eval&lt;/span&gt; /tmp/lua/testDebug.lua &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;執行後會進入debug模式，接下來可以輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;單步執行，或是輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;顯示所有的變數值。&lt;/p&gt;

&lt;p&gt;Debug模式提供了蠻多的指令方便開發人員除錯，&lt;strong&gt;但要注意不要在正式環境執行&lt;code class=&quot;highlighter-rouge&quot;&gt;--ldb&lt;/code&gt;&lt;/strong&gt;，因為Debug模式是一種阻斷模式，所有的請求都會被這個session阻塞住，可想而之在正式環境加上這個參數絕對會搞死系統的(如果你的系統邊緣到根本沒人用就又另當別論了…)。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jed@Jed-MacBook-Pro:~/Workspace/code/lua% docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; redis redis-cli &lt;span class=&quot;nt&quot;&gt;--ldb&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--eval&lt;/span&gt; /tmp/lua/testDebug.lua &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; , &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
Lua debugging session started, please use:
quit    &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; End the session.
restart &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; Restart the script &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;debug mode again.
&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; Show Lua script debugging commands.

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Stopped at 1, stop reason &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; step over
-&amp;gt; 1   &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; KEYS[1]
lua debugger&amp;gt; s
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Stopped at 2, stop reason &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; step over
-&amp;gt; 2   &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;data &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ARGV[1]
lua debugger&amp;gt; s
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Stopped at 3, stop reason &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; step over
-&amp;gt; 3   redis.call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SET&quot;&lt;/span&gt;, key, data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
lua debugger&amp;gt; p
&amp;lt;value&amp;gt; key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;
&amp;lt;value&amp;gt; data &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
lua debugger&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除了運行&lt;code class=&quot;highlighter-rouge&quot;&gt;--ldb&lt;/code&gt;以外，當然還有其他的方式可以幫助除錯，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Lua script內呼叫redis.log()，把需要記錄的除錯訊息寫入Redis的log file&lt;/li&gt;
  &lt;li&gt;用List當log，因為List是一直append的，符合log的特性&lt;/li&gt;
  &lt;li&gt;使用專門的Lua script editor協助除錯，例如ZeroBrandStudio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ZeroBrandStudio是一個蠻好用的Lua script IDE，使用方式可以參考我同事小黑寫的這篇&lt;a href=&quot;https://blackie1019.github.io/2018/05/01/Write-Redis-Lua-Script-with-ZeroBrane-Studio/&quot; target=&quot;_blank&quot;&gt;Write Redis Lua Script with ZeroBrane Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因為我個人比較習慣用VSCode，所以就沒有用ZeroBrandStudio，但它用來除錯的確蠻方便的。&lt;/p&gt;

&lt;h2 id=&quot;小結&quot;&gt;小結&lt;/h2&gt;

&lt;p&gt;這一篇儘量把PUB/SUB與Lua script基礎的部份講完，包含了一些實務上可能會遇到的問題，因內容有些多，所以Trouble shooting的部份就留待下一篇再講了。如果有任何意見，歡迎留言討論。&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Redis" /><category term="C#" /><category term="StackExchange.Redis" /><category term="Pub/Sub" /><category term="Lua Script" /><summary type="html">C#存取Redis 延續上一篇Redis系列 - C#存取Redis (上)，這篇文章會說明Redis的簡易Publish/Subscribe、Lua script的基礎知識。 PUBLISH/SUBSCRIBE Redis的PUB/SUB是很簡易的訊息機制，並不像一些專門的Message Middleware(例如RabbitMQ、ActiveMQ)提供很多豐富的功能，比如它就不保證訊息發送後一定不會遺失，但因為附帶的這個功能實在太方便了，實務上還是經常使用到。</summary></entry><entry><title type="html">Redis系列 - C#存取Redis (上)</title><link href="http://localhost:4000/2018/05/11/Redis-Programming-CSharp-Basic-1.html" rel="alternate" type="text/html" title="Redis系列 - C#存取Redis (上)" /><published>2018-05-11T00:00:00+08:00</published><updated>2018-05-11T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/11/Redis-Programming-CSharp-Basic-1</id><content type="html" xml:base="http://localhost:4000/2018/05/11/Redis-Programming-CSharp-Basic-1.html">&lt;h1 id=&quot;c存取redis&quot;&gt;C#存取Redis&lt;/h1&gt;

&lt;p&gt;這篇算是Redis系列第二篇，內容會儘量涵蓋存取Redis需要注意的一些基本知識及除錯&lt;/p&gt;

&lt;h2 id=&quot;redis的特性&quot;&gt;Redis的特性&lt;/h2&gt;

&lt;p&gt;在Redis系列第一篇有提到Redis是一個效能極好且穩定性很高的In-Memory的NoSQL database，它有幾個特性是我們需要知道的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以ANSI C開發，穩定&lt;/li&gt;
  &lt;li&gt;資料儲存在Memory中處理，減少了Disk I/O&lt;/li&gt;
  &lt;li&gt;Single Thread I/O Multiplex&lt;/li&gt;
  &lt;li&gt;提供AOF/RDB 2種持久化方式&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;還有一些其他的功能比如Pub/Sub、叢集之類的就先不講了，這邊要特別重點解釋Single Thread I/O Multiplex&lt;/p&gt;

&lt;p&gt;Redis是Single Thread，這點很重要請牢記，也就是說不管Server上有幾個CPU core，1個Redis instance就是只會用到1個CPU core，而且因為只有1個CPU core，它是無法同時運算多個request的。因此，如果有1個request佔用了太長的CPU時間，就會導致Redis無法回應其他connection送過來的request，這是一開始使用Redis的開發人員很常會犯的錯誤之一，就是把它當成傳統的RDBMS在用，導致效能低落甚至系統crash的都有。&lt;/p&gt;

&lt;p&gt;那麼為什麼Redis只有Single thread但卻能有極高的throughput呢? 那就不得不提一下很重要的&lt;code class=&quot;highlighter-rouge&quot;&gt;Multiplex&lt;/code&gt;，中文翻做多路複用，這在之後要使用的StackExchange.Redis中也是很重要的概念。&lt;/p&gt;

&lt;p&gt;I/O Multiplex是一種Socket I/O的處理模型，特性是用單一個Thread就可以同時處理多個Connection。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Multiplex.png&quot; alt=&quot;Multiplex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Redis預設是用epoll的方式來實現，而epoll本身還有幾個特點是只處理Active connection、不限制連線數及Zero copy，因此在處理大量socket connection的效率極好。&lt;/p&gt;

&lt;h2 id=&quot;常用的redis資料結構介紹&quot;&gt;常用的Redis資料結構介紹&lt;/h2&gt;

&lt;p&gt;Redis提供了好幾種資料結構，比較常用到的是String、Hash、List、Set、SortedSet這5種，另外還有特殊用途的HyperLogLog及Geo。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String是最簡單的Key/Value結構&lt;/li&gt;
  &lt;li&gt;Hash是一種Map結構，以.Net來說就像是HashTable，一個Key底下可以存放N個Key/Value&lt;/li&gt;
  &lt;li&gt;List跟.Net裡的List不一樣，是類似Queue或Stack的結構，以加入List的順序排序&lt;/li&gt;
  &lt;li&gt;Set則是一種沒有排序的集合&lt;/li&gt;
  &lt;li&gt;SortedSet是加上排序功能的Set，但跟List不一樣的是排序依給定的權重值來排&lt;/li&gt;
  &lt;li&gt;HyperLogLog 我個人覺得它有點不算是結構，應該算是一種演算法，用在個數估算用的&lt;/li&gt;
  &lt;li&gt;Geo 顧名思義，這是放經緯度的，可以拿來算2點之間的距離或是做跟地圖相關的應用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stackexchangeredis&quot;&gt;StackExchange.Redis&lt;/h2&gt;

&lt;p&gt;這是目前.Net圈子最有名、最多人使用的Redis client，也是Redis官方推薦的.Net client，作者是在StackExchange工作的Marc Gravel，目前最新的版本支援到Redis 4.0&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/StackExchange/StackExchange.Redis&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/StackExchange.Redis/&quot; target=&quot;_blank&quot;&gt;NuGet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StackExchange.Redis也實作了&lt;code class=&quot;highlighter-rouge&quot;&gt;Multiplex&lt;/code&gt;，也就是說它對Redis也是只建立一條connection，然後透過Multiplex多路複用去服務大量的請求，這在高並發的Web應用場景非常的實用。假設沒有實作這個機制，當同時有30個request要去存取Redis時，就必須建立30條connection，然後你不曉得何時資料會回來，於是就要輪詢這30條connection，這會造成很大的延遲，而或許也可以使用Connection pool技術，讓連線可以被重用，但就需要去管理Connection pool。&lt;/p&gt;

&lt;p&gt;因為Redis設計成single thread的關係，無論採用輪詢還是Connection pool，對存取Redis來說都不是很理想的設計，但Multiplex可以很好的解決這些問題，它可以有效的降低waiting，儘可能的讓共用的connection塞滿指令與資料。&lt;/p&gt;

&lt;h3 id=&quot;建立連線與基本用法&quot;&gt;建立連線與基本用法&lt;/h3&gt;

&lt;p&gt;使用StackExchange.Redis建立連線很簡單，傳入一個連線字串就好了，大部份的參數都有預設值&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.49.188:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StringSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1688&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面這段code會建立一個連線物件並建立對Redis的連線，連線建立完成後會建立Database實體，然後就可以叫用Database實際操作Redis進行存取。&lt;/p&gt;

&lt;p&gt;這裡有幾個重要的點要講:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;連線管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面有提到StackExchange.Redis使用Multiplex處理連線問題，同時也沒有Connection pool的設定，所以StackExchange.Redis的連線並不能像使用Database一樣，用using來建立與釋放，這是很多初碰Redis的新手很常犯的錯誤之一。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 注意! 這是錯誤的寫法&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.49.188:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StringSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1688&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;比較正確的寫法是另外用一個Singleton的寫法包起來，如以下範例程式碼，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Singleton&lt;/code&gt;的design pattern避免一直重複建立連線物件，因為建立TCP連線是很重的開銷，頻繁的銷毀/重建會造成嚴重的效能問題。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StackExchange.Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RedisExample&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisConnection&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_settingOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please call Init() first.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_settingOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_settingOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settingOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_settingOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settingOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;連線設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StackExchange.Redis提供了很多的連線參數設定，你可以把所有的設定放在一個字串變數內，建立ConnectionMultiplexer時傳進去，例如：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis0:6380,redis1:6380,password=test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或是建立&lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigurationOption&lt;/code&gt;物件後再傳入&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis0:6380,redis1:6380,password=test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;詳細的設定參數說明請參考 &lt;a href=&quot;https://stackexchange.github.io/StackExchange.Redis/Configuration&quot; target=&quot;_blank&quot;&gt;StackExchange.Redis Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;fireandforgetasync及batch&quot;&gt;FireAndForget、Async及Batch&lt;/h3&gt;

&lt;p&gt;StackExchange.Redis的底層實作其實都是走Pipelines，所以不同的thread的指令在client端不會互相阻塞，但如果指令在server端花了較長的時間，依然會影響到全部的連線。&lt;/p&gt;

&lt;p&gt;實際在使用時我們可以選擇同步或非同步的方式存取，只是很多人會搞不清楚&lt;code class=&quot;highlighter-rouge&quot;&gt;FireAndForget&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Async&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;Batch&lt;/code&gt;這三者的差異，開發時沒有正確的使用，上線後就很容易出現一些奇奇怪怪的Timeout exception。&lt;/p&gt;

&lt;p&gt;先講Async，其實就是Pipelines，指令的執行結果以Task回傳，不會阻塞調用的執行緒，指令以Async()結尾，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;GetAsync()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSetAsync()&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    participant Application
    participant StackExchange.Redis
    participant Redis
    Application-&amp;gt;&amp;gt;StackExchange.Redis: Send Value=1
    StackExchange.Redis-&amp;gt;&amp;gt;Redis:Send Value=1
    Application-&amp;gt;&amp;gt;StackExchange.Redis: Send Value=2
    StackExchange.Redis-&amp;gt;&amp;gt;Redis:Send Value=2
    Application-&amp;gt;&amp;gt;StackExchange.Redis: Send Value=3
    StackExchange.Redis-&amp;gt;&amp;gt;Redis:Send Value=3
    Redis--&amp;gt;&amp;gt;Redis: process
    Redis--&amp;gt;&amp;gt;StackExchange.Redis: return Value=1, Value=2, Value=3
    StackExchange.Redis--&amp;gt;&amp;gt;Application: return Value=1, Value=2, Value=3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Batch，非同步的批次處理，但這個批次是會先queued在StackExchange.Redis內部的一個command queue，當你呼叫Batch.Execute時才整批指令發送出去。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    participant Application
    participant StackExchange.Redis
    participant Redis
    Application-&amp;gt;&amp;gt;StackExchange.Redis: Send Value=1
    Application-&amp;gt;&amp;gt;StackExchange.Redis: Send Value=2
    Application-&amp;gt;&amp;gt;StackExchange.Redis: Send Value=3
    StackExchange.Redis-&amp;gt;&amp;gt;Redis: Batch Send
    Redis--&amp;gt;&amp;gt;Redis: process
    Redis--&amp;gt;&amp;gt;StackExchange.Redis: return Value=1
    StackExchange.Redis--&amp;gt;&amp;gt;Application: return Value=1
    Redis--&amp;gt;&amp;gt;StackExchange.Redis: return Value=2
    StackExchange.Redis--&amp;gt;&amp;gt;Application: return Value=2
    Redis--&amp;gt;&amp;gt;StackExchange.Redis: return Value=3
    StackExchange.Redis--&amp;gt;&amp;gt;Application: return Value=3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，這個整批指令因為是一整個block發送，會阻塞當下的執行緒&lt;/p&gt;

&lt;p&gt;FireAndForget，這是一個比較不太一樣的方式，不需要使用Async()結尾的API，StackExchange.Redis會在指令發送後，不管Redis那邊處理的狀況如何，依據呼叫的API的回傳型別，立即返回一個Default的Object，在client端的throughput是最高的，因為完全不管回傳值，使用的方式比較不一樣，要指定參數才可以使用。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis0:6380&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StringSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FireAndForget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當指定最後的參數為&lt;code class=&quot;highlighter-rouge&quot;&gt;CommandFlags.FireAndForget&lt;/code&gt;，StackExchange.Redis就不會管是不是真的有回傳，直接return一個Default(T)給你&lt;/p&gt;

&lt;h2 id=&quot;小結&quot;&gt;小結&lt;/h2&gt;

&lt;p&gt;這篇算是上半篇入門，還有一些內容如Lua script、Trouble-shooting等會在下半篇寫完。&lt;/p&gt;

&lt;p&gt;程式碼相關的部份都很簡單，但一些主要的基礎觀念很重要，會影響到Redis能不能用的好，如對文章內容有建議或是不清楚的部份，歡迎留言討論。&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Redis" /><category term="C#" /><category term="StackExchange.Redis" /><summary type="html">C#存取Redis 這篇算是Redis系列第二篇，內容會儘量涵蓋存取Redis需要注意的一些基本知識及除錯 Redis的特性 在Redis系列第一篇有提到Redis是一個效能極好且穩定性很高的In-Memory的NoSQL database，它有幾個特性是我們需要知道的： 以ANSI C開發，穩定 資料儲存在Memory中處理，減少了Disk I/O Single Thread I/O Multiplex 提供AOF/RDB 2種持久化方式</summary></entry><entry><title type="html">如何開始架構設計</title><link href="http://localhost:4000/2018/05/06/How-To-Start-Architecture-Design.html" rel="alternate" type="text/html" title="如何開始架構設計" /><published>2018-05-06T00:00:00+08:00</published><updated>2018-05-06T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/06/How-To-Start-Architecture-Design</id><content type="html" xml:base="http://localhost:4000/2018/05/06/How-To-Start-Architecture-Design.html">&lt;h1 id=&quot;需求決定架構&quot;&gt;需求決定架構&lt;/h1&gt;

&lt;p&gt;一開始就直接破題了，軟體架構不是看著國內外大神分享的架構簡報抄一遍就好，也不是完全靠經驗決定架構怎麼設計。&lt;/p&gt;

&lt;p&gt;所有的架構設計都是由需求決定，我指的需求不單單指需求規格書上的&lt;code class=&quot;highlighter-rouge&quot;&gt;功能性需求(Funtional Requirements)&lt;/code&gt;，還包括了很容易被忽視的&lt;code class=&quot;highlighter-rouge&quot;&gt;非功能性需求(Non-Functional Requirements)&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;約束(Constraints)&lt;/code&gt;。
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;需求如何影響架構&quot;&gt;需求如何影響架構&lt;/h2&gt;

&lt;p&gt;一個軟體專案的失敗原因很多，但追根究柢還是肇因於對需求沒有共識。&lt;/p&gt;

&lt;p&gt;同樣的，一個軟體系統架構設計的好與壞，也是取決於架構師對這幾類需求的理解有多透徹。&lt;/p&gt;

&lt;h3 id=&quot;功能性需求&quot;&gt;功能性需求&lt;/h3&gt;

&lt;p&gt;功能性需求會影響的是職責與協作，不同的功能我們會依其所屬的Domain特性進行分類，且要決定它們之間如何溝通，既要降低耦合，還要提高內聚。&lt;/p&gt;

&lt;p&gt;舉例來說，一個線上購物網站是一個大的domain，裡面會涉及很多Sub domain，不同的Sub domain彼此協同合作並組合成一個系統，Sub domain可能還會再拆分成不同的模組，模組與模組之間的溝通就需要決定交換資訊的方式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
    A(Login)-.-C(Member)
    B(Register)-.-C
    D(Product)-.-E(ShoppingCart)
    C-.-E
    E-.-G
    G(Order)-.-F(Payment)
    D-.-G
    G-.-H(Deliver)
    C-.-G
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;約束&quot;&gt;約束&lt;/h3&gt;

&lt;p&gt;在談非功能需求之前，得要先談&lt;code class=&quot;highlighter-rouge&quot;&gt;約束&lt;/code&gt;，因為非功能需求決定的是品質，而約束決定的是這個架構現不現實，靠不靠譜，而且非功能性需求大多時候是要將功能性需求+約束條件放在一起看，才能決定哪些非功能性需求可以被滿足。&lt;/p&gt;

&lt;p&gt;什麼是約束? &lt;strong&gt;約束指的是所處的環境下，無法改變或改變成本過高的遊戲規則&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;舉例來說，老闆或客戶壓下來的時程、政府法規、公司可用資金、團隊技術能力、舊有系統架構包袱…等等，是一種&lt;code class=&quot;highlighter-rouge&quot;&gt;環境限制&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，設計架構時不能不考慮這些約束，不然就很容易成為&lt;code class=&quot;highlighter-rouge&quot;&gt;太空架構師&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;神級架構師&lt;/code&gt;，因為你提的架構也許很厲害很強大，但無法落地的架構要嘛就是一直不落地，要嘛就是修修改改後有很高的概率成為所有人的惡夢。&lt;/p&gt;

&lt;h3 id=&quot;非功能性需求&quot;&gt;非功能性需求&lt;/h3&gt;

&lt;p&gt;Non-Functional Requirements(NFRs)決定的是&lt;code class=&quot;highlighter-rouge&quot;&gt;品質&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;品質不是測試出來的，軟體系統的品質天花板取決於架構設計滿足多少非功能性需求，因此非功能性需求又被稱為&lt;code class=&quot;highlighter-rouge&quot;&gt;品質屬性&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可是架構設計最難的地方就在這，因為這些NFRs很多是彼此互斥的，再加上約束條件的環境限制，不可能每項都滿足，因此就必須做出取捨(Trade-off)。&lt;/p&gt;

&lt;p&gt;舉例來說，Performance很重要，如果想要讓交易寫入DB的效能最大化，就是把相關的Table集中在同一個DB，使用Stored Procedure並減少不必要的索引，但這樣以DB為主的架構不易Scale out只能Scale up，因此Scalability就跟Performance及Capacity產生互斥，短期可能系統比較快上線，但長期會造成其他問題增加成本。&lt;/p&gt;

&lt;p&gt;可是如果採用分散式的做法，以現有的Schema設計，又會面臨Data integrity與Performance可能無法滿足，那還要再加上Schema的架構調整…。&lt;/p&gt;

&lt;p&gt;看起來挺糾結的，是吧?&lt;/p&gt;

&lt;h2 id=&quot;架構師要懂的需求結構化&quot;&gt;架構師要懂的需求結構化&lt;/h2&gt;

&lt;p&gt;說完了這三類需求，那架構師該怎麼生存下去? 要求寫需求規格書的需求分析師把這些寫進去肯定不現實，再退一步講，架構師不能依賴文件，尤其是需求規格書。&lt;/p&gt;

&lt;p&gt;以前我很依賴需求規格書，但實際的軟體開發與設計經驗告訴我，這樣的架構設計無法建構在完整的大局觀之下，後續的不良影響會很深遠。首先，需求分析師很多都不是技術背景出身，並不那麼理解功能性需求、約束與非功能性需求之間是如何互相影響。再者，需求分析師訪談的對象往往只是使用者，拿的是使用者需求，觀點被侷限住了，使用者通常很難告訴我們系統要如何易於擴展，效能要多好才符合未來的業務成長，因此需求規格書內就很不容易把這部份的需求寫的很清楚。&lt;/p&gt;

&lt;p&gt;但沒關係，這也不是需求分析師的錯，需求規格本來就得要經過討論溝通，我們使用文件但不依賴文件，分門別類把需求結構化，然後有系統的去分析它們造成的影響。&lt;/p&gt;

&lt;p&gt;架構設計要分析的需求不是全部需求項目都拿出來分析，要分析的只有關鍵需求，那是整個架構設計需做出取捨最關鍵的部份，另一方面架構設計愈早開始愈好，等到需求規格書要寫完，專案差不多已經進開發階段了，這時才開始做架構設計就太慢了。&lt;/p&gt;

&lt;p&gt;前面提到需求分三類，但沒提到的是角色，角色包括&lt;code class=&quot;highlighter-rouge&quot;&gt;組織&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;使用者&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;開發團隊&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;維運團隊&lt;/code&gt;四類，這四類分別代表了不同的層面與觀點，而架構設計就是要從這四個層面逐步找出關鍵需求。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;組織層面
    &lt;ul&gt;
      &lt;li&gt;需求：Business Goal
        &lt;ul&gt;
          &lt;li&gt;跨境電商平台網站&lt;/li&gt;
          &lt;li&gt;提升不同地區的市佔率&lt;/li&gt;
          &lt;li&gt;未來能快速增加相關的營運項目&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;約束：組織層面的約束
        &lt;ul&gt;
          &lt;li&gt;Time to market&lt;/li&gt;
          &lt;li&gt;可用資金&lt;/li&gt;
          &lt;li&gt;法規限制&lt;/li&gt;
          &lt;li&gt;24H持續營運&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用者層面
    &lt;ul&gt;
      &lt;li&gt;需求：各種使用者觀點的功能性需求
        &lt;ul&gt;
          &lt;li&gt;物流：與當地物流整合&lt;/li&gt;
          &lt;li&gt;行銷企畫：靈活的地區促銷管理&lt;/li&gt;
          &lt;li&gt;營運：多種銷售平台&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;約束：使用者層級約束
        &lt;ul&gt;
          &lt;li&gt;支援多國語言&lt;/li&gt;
          &lt;li&gt;End user的使用習慣&lt;/li&gt;
          &lt;li&gt;物流商整合技術能力薄弱&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;開發團隊層面
    &lt;ul&gt;
      &lt;li&gt;需求
        &lt;ul&gt;
          &lt;li&gt;系統易於擴展整合&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;約束
        &lt;ul&gt;
          &lt;li&gt;開發團隊人力有限&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;維運團隊層面
    &lt;ul&gt;
      &lt;li&gt;需求
        &lt;ul&gt;
          &lt;li&gt;容易且快速的部署方式&lt;/li&gt;
          &lt;li&gt;靈活的Alert設定&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;約束
        &lt;ul&gt;
          &lt;li&gt;主機虛擬化，管理系統數量龐大&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這四個層面可以先由上而下，逐步找出關鍵需求與約束，然後再依關鍵需求與約束的邏輯推導出&lt;code class=&quot;highlighter-rouge&quot;&gt;使用者層級的關鍵非功能性需求&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一樣舉個例子來看一下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;功能性需求&lt;/th&gt;
      &lt;th&gt;約束&lt;/th&gt;
      &lt;th&gt;使用者層級&lt;/th&gt;
      &lt;th&gt;非功能性需求&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;組織&lt;/td&gt;
      &lt;td&gt;跨境電商平台網站&lt;/td&gt;
      &lt;td&gt;24H持續營運&lt;/td&gt;
      &lt;td&gt;營運&lt;/td&gt;
      &lt;td&gt;高可用性, 高安全性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;End user&lt;/td&gt;
      &lt;td&gt;性能(Response time)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;物流&lt;/td&gt;
      &lt;td&gt;與當地物流整合&lt;/td&gt;
      &lt;td&gt;物流商整合技術能力薄弱&lt;/td&gt;
      &lt;td&gt;物流商IT&lt;/td&gt;
      &lt;td&gt;整合API易用性, 重用性&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;為什麼一定要是使用者層級的? 在整理關鍵需求及推導關鍵非功能性需求時，通常會遇到衝突的需求，架構師得要知道取捨，我的觀點是&lt;strong&gt;一切需求都有其業務價值，唯有用同一種價值單位才能對這些需求的優先級進行排序&lt;/strong&gt;，因此你在取捨時才有依據。&lt;/p&gt;

&lt;p&gt;如果這些需求被定位成技術需求而不是業務需求，那麼在需求排序時就會因為標準不一，很容易被犧牲掉，對架構設計的取捨也就沒有依據，你有很大的可能性做出錯的架構設計。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;很少人會談需求跟架構設計的關係，寫架構Pattern的很多，照著搬常會砸到自己的腳，還是要回到有需求才有架構設計，只是需求一直很難說的清楚，特別是在非功能性需求的部份，要先探索需求，然後跟寫程式一樣找出需求規格，最後驗證它的可行性。&lt;/p&gt;

&lt;h2 id=&quot;後記&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;這篇文章我覺得真的很難寫，因為知道該怎麼做是一回事，但要有條理的寫出來又是另一回事，要一直梳理想法跟做法，但這個過程對我個人的幫助真的很大，有些模糊的想法也變的比較具體，在架構設計也有了一些新的領悟。&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Architecture" /><category term="架構設計" /><category term="需求" /><summary type="html">需求決定架構 一開始就直接破題了，軟體架構不是看著國內外大神分享的架構簡報抄一遍就好，也不是完全靠經驗決定架構怎麼設計。 所有的架構設計都是由需求決定，我指的需求不單單指需求規格書上的功能性需求(Funtional Requirements)，還包括了很容易被忽視的非功能性需求(Non-Functional Requirements)與約束(Constraints)。</summary></entry><entry><title type="html">Redis系列 - 環境建置篇</title><link href="http://localhost:4000/2018/05/02/Redis-Environment-Installation-Configuration.html" rel="alternate" type="text/html" title="Redis系列 - 環境建置篇" /><published>2018-05-02T00:00:00+08:00</published><updated>2018-05-02T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/02/Redis-Environment-Installation-Configuration</id><content type="html" xml:base="http://localhost:4000/2018/05/02/Redis-Environment-Installation-Configuration.html">&lt;h1 id=&quot;redis系列---環境建置篇&quot;&gt;Redis系列 - 環境建置篇&lt;/h1&gt;

&lt;p&gt;這篇會是Redis系列文的第一篇，著重在建立環境的基本知識。&lt;/p&gt;

&lt;h2 id=&quot;基本介紹&quot;&gt;基本介紹&lt;/h2&gt;

&lt;p&gt;以官方的解釋，Redis是一套Open source的In-memory NoSQL database，可以應用在Cache、Database及簡單的Message broker。&lt;/p&gt;

&lt;p&gt;作者則說它是一個&lt;code class=&quot;highlighter-rouge&quot;&gt;Data Structures Server&lt;/code&gt;，顧名思義，它提供了很多種資料結構及相對應的指令去操作這些資料。由於它是以In-Memory的方式為主，另一個很明顯的特性就是它很快，非常快，正確使用下可以輕鬆的處理每秒上萬的請求。&lt;/p&gt;

&lt;p&gt;由於它具備極高的效能與可靠性，在很多系統中都會看到它的身影，對Backend/Fullstack engineer來說，這已經是必備的技能之一。
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;安裝與設定&quot;&gt;安裝與設定&lt;/h2&gt;

&lt;p&gt;安裝Redis有幾種方式，一種是採原生安裝在乾淨的OS上，另一種是使用Docker。本文二種方式都會討論到。&lt;/p&gt;

&lt;h3 id=&quot;原生安裝&quot;&gt;原生安裝&lt;/h3&gt;

&lt;p&gt;測試環境: CentOS 7&lt;/p&gt;

&lt;p&gt;CentOS預設有些東西沒有安裝，所以我先安裝一些必要的套件&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wget gcc make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然後用&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;從Redis官網下載最新的Redis安裝包，這篇文章撰寫時，最新的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;4.0.9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下載完成後解壓縮到你想要放的位置，然後執行make進行編譯&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;wget http://download.redis.io/releases/redis-4.0.9.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf redis-4.0.9.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;redis-4.0.9
make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;編譯完成後執行&lt;code class=&quot;highlighter-rouge&quot;&gt;utils/install_server.sh&lt;/code&gt;，這個腳本會幫你把redis安裝成背景服務&lt;/p&gt;

&lt;p&gt;前面幾個選項我都是用&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;，但最後的&lt;code class=&quot;highlighter-rouge&quot;&gt;redis executable path[]&lt;/code&gt;，請輸入完整的路徑，以我的環境是&lt;code class=&quot;highlighter-rouge&quot;&gt;/root/redis-4.0.9/src/redis-server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安裝完成後應該會看到這個訊息&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Selected config:
Port           : 6379
Config file    : /etc/redis/6379.conf
Log file       : /var/log/redis_6379.log
Data &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;       : /var/lib/redis/6379
Executable     : /root/redis-4.0.9/src/redis-server
Cli Executable : /root/redis-4.0.9/src/redis-cli
Is this ok? Then press ENTER to go on or Ctrl-C to abort.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;按下ENTER鍵後，就會把redis安裝並執行在背景，接下來我們用redis-cli測試一下&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;src/redis-cli &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; localhost &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果安裝成功的話，就會連到Redis了，但如果要實際應用到production，請不要學我用root的權限啊…&lt;/p&gt;

&lt;h3 id=&quot;redis的基本設定&quot;&gt;Redis的基本設定&lt;/h3&gt;

&lt;p&gt;Redis安裝完成後，會有預設的設定檔讓它可以正常的執行，但實際應用上，有些設定值還是要調整一下&lt;/p&gt;

&lt;p&gt;如果你按照前一個步驟安裝完成，那麼設定檔預設會是在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/redis/6379.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下來列出的幾個設定值是需要調整的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind 127.0.0.1&lt;/code&gt; - 這個要改成這部機器的實際IP，不然其他機器是連不進來的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;port 6379&lt;/code&gt; - 如果你會在同一台主機上跑多個instance，那麼port就一定要分別設定不一樣的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;memory &amp;lt;bytes&amp;gt;&lt;/code&gt; - 設定可用的RAM上限，比如主機有16G，你希望Redis使用8G，剩餘的保留給OS及其他服務，那就設定為&lt;code class=&quot;highlighter-rouge&quot;&gt;memory 8g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxmemory-policy noeviction&lt;/code&gt; - 配合memory的設定，要設定RAM不足時的回收機制，建議用 &lt;code class=&quot;highlighter-rouge&quot;&gt;maxmemory-policy volatile-lru&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;改完設定存檔後要重新Redis，新設定才會生效&lt;/p&gt;

&lt;h3 id=&quot;使用docker&quot;&gt;使用Docker&lt;/h3&gt;

&lt;p&gt;雖然Redis的安裝並不困難，但直接使用Docker無疑是更簡單的方式&lt;/p&gt;

&lt;p&gt;先假設你已經安裝好Docker的環境，接下來只要輸入下列指令就能快速的跑起來一個Redis instance&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; MyRedisCache &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379:6369 redis&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;要執行Docker Container內的&lt;code class=&quot;highlighter-rouge&quot;&gt;Redis-cli&lt;/code&gt;的話就輸入這個指令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; MyRedisCache:redis &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; redis redis-cli &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; redis &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;redis在docker的基本設定&quot;&gt;Redis在Docker的基本設定&lt;/h3&gt;

&lt;p&gt;Redis docker image並沒有自帶redis的config，所有設定值都是用預設的，而且由於docker的一些特性，並不需要特別去設定要bind到哪個實體IP&lt;/p&gt;

&lt;p&gt;可是在實際使用時，還是會需要自定義一些設定值，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Memory policy&lt;/code&gt;，接下來就一起來看如何建立Redis的設定檔&lt;/p&gt;

&lt;p&gt;先連到Redis官網取得對應版本的redis.conf&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://redis.io/topics/config&quot; target=&quot;_blank&quot;&gt;Redis configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因為拉下來的docker image是4.0.9，所以我是使用對應4.0版的redis.conf&lt;/p&gt;

&lt;p&gt;下載回來後找個適合的地方放，因為寫這篇文章時是用Mac，我是放在&lt;code class=&quot;highlighter-rouge&quot;&gt;/User/jed/Workspace/docker_volume/redis/redis.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然後請先停下正在運行的Redis container，再把&lt;code class=&quot;highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt;以volume的方式掛載到docker上&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker stop 6c5b // 6c5b請替換成你運行中的redis container &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379:6379 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /Users/jed/Workspace/docker_volume/redis/redis.conf:/usr/local/etc/redis/redis.conf redis&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以這個方式掛載上來的redis.conf就可以在host進行修改，修改完再啟用一個新的container就好&lt;/p&gt;

&lt;p&gt;附帶一提，官方的docker image沒有自帶vim，如果你想在container編輯的話，請另外以apt-get安裝vim&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;apt-get update
apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;這篇是學習Redis之前需要知道的基本環境建置，應該算是蠻簡單的。&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Redis" /><category term="Docker" /><summary type="html">Redis系列 - 環境建置篇 這篇會是Redis系列文的第一篇，著重在建立環境的基本知識。 基本介紹 以官方的解釋，Redis是一套Open source的In-memory NoSQL database，可以應用在Cache、Database及簡單的Message broker。 作者則說它是一個Data Structures Server，顧名思義，它提供了很多種資料結構及相對應的指令去操作這些資料。由於它是以In-Memory的方式為主，另一個很明顯的特性就是它很快，非常快，正確使用下可以輕鬆的處理每秒上萬的請求。 由於它具備極高的效能與可靠性，在很多系統中都會看到它的身影，對Backend/Fullstack engineer來說，這已經是必備的技能之一。</summary></entry><entry><title type="html">ASP.Net Core - DistributedRedisCache</title><link href="http://localhost:4000/2018/04/29/ASP-Net-Core-Redis-Cache.html" rel="alternate" type="text/html" title="ASP.Net Core - DistributedRedisCache" /><published>2018-04-29T00:00:00+08:00</published><updated>2018-04-29T00:00:00+08:00</updated><id>http://localhost:4000/2018/04/29/ASP-Net-Core-Redis-Cache</id><content type="html" xml:base="http://localhost:4000/2018/04/29/ASP-Net-Core-Redis-Cache.html">&lt;h1 id=&quot;aspnet-core---distributedrediscache&quot;&gt;ASP.Net Core - DistributedRedisCache&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在開發Web Application時，Redis是很常見的分散式快取服務，因此Microsoft也為了ASP.NET Core準備了Extension套件，只要在一開始的Startup.ConfigureService注入DistributedRedisCache(細節可以參考我強者同事John Wu的&lt;a href=&quot;https://blog.johnwu.cc/article/ironman-day20-asp-net-core-caching-redis-session.html&quot; target=&quot;_blank&quot;&gt;鐵人賽文章&lt;/a&gt;)。
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;先講結論&quot;&gt;先講結論&lt;/h2&gt;

&lt;p&gt;但是…這裡面其實藏了一個坑，如果只有單純的使用ASP.Net Core+DistributedRedisCache，那很可能不會發現，但如果你的系統架構還有使用到StackExchange.Redis或其他平台的Redis Library去存取相同的Redis，那就要特別注意了。&lt;/p&gt;

&lt;p&gt;DistributedRedisCache提供了SetStringAsync()與GetStringAsync()這2個method，對用習慣了StackExchange.Redis的老同學來說，一看到就很直覺的就會對應到IDatabase的StringSetAsync()與StringGetAsync()，問題在於…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;DistributedRedisCache的實作是Hash!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;DistributedRedisCache的實作是Hash!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;DistributedRedisCache的實作是Hash!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很坑人所以講三遍，泥馬的為什麼用了Hash不說啊，這種命名方式真的會讓人搞混…&lt;/p&gt;

&lt;h2 id=&quot;被坑到的讀寫分離&quot;&gt;被坑到的讀寫分離&lt;/h2&gt;

&lt;p&gt;在稍具規模的系統應用Redis做為Cache時，更新Cache的策略就會依各種限制與需求去調整，特別是在讀寫分離的架構下，寫入Redis及讀出Redis會分別交給不同的服務執行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    participant Frontend
    participant Redis
    participant Backend
    Frontend-&amp;gt;&amp;gt;Redis: read data
    Redis--&amp;gt;&amp;gt;Frontend: response
    Backend-&amp;gt;&amp;gt;Redis: write data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下來我們直接實作一下這個架構，來看看為什麼Hash會造成問題&lt;/p&gt;

&lt;h2 id=&quot;架構實作&quot;&gt;架構實作&lt;/h2&gt;

&lt;p&gt;接下來的實作需要具備的基礎知識：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;開發環境已安裝好Docker及.Net Core 2.0&lt;/li&gt;
  &lt;li&gt;具備Docker的基礎知識及基本操作能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;建立redis&quot;&gt;建立Redis&lt;/h3&gt;

&lt;p&gt;建立Redis最快的方式就是直接拉一個docker image下來run了，請開啟你的Command Line或Terminal，然後輸入這段指令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; MyRedisCache &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379:6369 redis&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;這個指令會跑起來一個Redis官方的Docker container，接下來就能做為我們的Cache服務器&lt;/p&gt;

&lt;h3 id=&quot;建立backend&quot;&gt;建立Backend&lt;/h3&gt;

&lt;p&gt;請建立一個Console的project，從NuGet加入&lt;code class=&quot;highlighter-rouge&quot;&gt;StackExchange.Redis&lt;/code&gt;，然後在&lt;code class=&quot;highlighter-rouge&quot;&gt;Programs.cs&lt;/code&gt;加入以下程式碼&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMultiplexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: Redis connection is established.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyCache:foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared cache data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StringSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: StringSet: key:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, value:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Press any key to continue...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;這支小程式負責模擬Backend，寫入Frontend需要的&lt;code class=&quot;highlighter-rouge&quot;&gt;MyCache:foo&lt;/code&gt;到Redis Cache中&lt;/p&gt;

&lt;h3 id=&quot;建立frontend&quot;&gt;建立Frontend&lt;/h3&gt;

&lt;p&gt;請建立一個ASP.Net Core Web MVC的專案&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;註冊&lt;code class=&quot;highlighter-rouge&quot;&gt;DistributedRedisCache&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IServiceCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddDistributedRedisCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下來在&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.cs&lt;/code&gt;注入&lt;code class=&quot;highlighter-rouge&quot;&gt;DistributedRedisCache&lt;/code&gt;，並讀取從Backend寫入的&lt;code class=&quot;highlighter-rouge&quot;&gt;MyCache:foo&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDistributedCache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HomeController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDistributedCache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyCache:foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;先執行Backend把&lt;code class=&quot;highlighter-rouge&quot;&gt;MyCache:foo&lt;/code&gt;寫入Redis後，再執行Frontend，然後…&lt;/p&gt;

&lt;p&gt;就會出錯了…XD&lt;/p&gt;

&lt;h3 id=&quot;發生錯誤&quot;&gt;發生錯誤&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.rawgit.com/jed1978/blog-images/d0b969c4/Error-WRONGTYPE.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從這個錯誤訊息，我們可以得知這是因為沒有使用正確對應的指令去存取Redis，我們直接寫一筆到Redis來看一下好了&lt;/p&gt;

&lt;p&gt;改寫&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.cs&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Index()&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyCache:test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然後開啟另一個Terminal，輸入下列指令叫用Redis-cli檢查Redis內存放的&lt;code class=&quot;highlighter-rouge&quot;&gt;MyCache:test&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; MyRedisCache:redis &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; redis redis-cli &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; redis &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;輸入type &lt;code class=&quot;highlighter-rouge&quot;&gt;MyCache:test&lt;/code&gt;後，如圖所示，我們可以看到這個key的type是hash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.rawgit.com/jed1978/blog-images/57130655/redis-type.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;檢查原始碼&quot;&gt;檢查原始碼&lt;/h3&gt;

&lt;p&gt;再來看一下Github上的原始碼，看到這個Lua script就瞭了，真的是Hash啊! 因此在方便使用之餘，還是要特別注意這個API命名上不一致的問題，否則在混合其他平台或在ASP.Net Core使用了多種方式存取Redis時，就會遇到很意外的錯誤。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// KEYS[1] = = key&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ARGV[1] = absolute-expiration - ticks as long (-1 for none)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ARGV[2] = sliding-expiration - ticks as long (-1 for none)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ARGV[3] = relative-expiration (long, in seconds, -1 for none) - Min(absolute-expiration - Now, sliding-expiration)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ARGV[4] = data - byte[]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this order should not change LUA script depends on it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetScript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;
        redis.call('HMSET', KEYS[1], 'absexp', ARGV[1], 'sldexp', ARGV[2], 'data', ARGV[4])
        if ARGV[3] ~= '-1' then
            redis.call('EXPIRE', KEYS[1], ARGV[3])
        end
        return 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aspnet/Caching/blob/dev/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs&quot;&gt;DistributedRedisCache 原始碼連結&lt;/a&gt;{target:”_blank”}&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;個人覺得這真的是一個未依慣例命名造成的認知問題，如果Method改名成HashGet, HashSet，這篇文章應該就不會存在了。&lt;/p&gt;

&lt;p&gt;此外，如果真的要應用在比較具規模的系統，我應該不會選用DistributedRedisCache，而是針對需求另外設計一個介面去包住StackExchange.Redis&lt;/p&gt;

&lt;p&gt;原因並不是我愛造新輪子，而是這個內建的元件並無法完全發揮Redis的能力，用在小型系統應該問題不大，但在讀寫分離的場景或是混合架構時，先天的限制就會很明顯了。&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="ASP.Net Core" /><category term="DistributedRedisCache" /><category term="Redis" /><category term="Cache" /><summary type="html">ASP.Net Core - DistributedRedisCache 前言 在開發Web Application時，Redis是很常見的分散式快取服務，因此Microsoft也為了ASP.NET Core準備了Extension套件，只要在一開始的Startup.ConfigureService注入DistributedRedisCache(細節可以參考我強者同事John Wu的鐵人賽文章)。</summary></entry><entry><title type="html">Upgrade GitLab from 10.3.3 to 10.7.1</title><link href="http://localhost:4000/2018/04/27/GitLab-Upgrade-500-Error.html" rel="alternate" type="text/html" title="Upgrade GitLab from 10.3.3 to 10.7.1" /><published>2018-04-27T00:00:00+08:00</published><updated>2018-04-27T00:00:00+08:00</updated><id>http://localhost:4000/2018/04/27/GitLab-Upgrade-500-Error</id><content type="html" xml:base="http://localhost:4000/2018/04/27/GitLab-Upgrade-500-Error.html">&lt;h1 id=&quot;gitlab-1033-ee-更新-1071-ee的問題&quot;&gt;Gitlab 10.3.3 EE 更新 10.7.1 EE的問題&lt;/h1&gt;

&lt;h2 id=&quot;升版失敗&quot;&gt;升版失敗&lt;/h2&gt;

&lt;p&gt;某同事在某一天星期五上午，提早到了公司，依原先的計畫要&lt;del&gt;宰殺&lt;/del&gt;升級全部團隊共用的Gitlab Server到最新的10.7.1。&lt;/p&gt;

&lt;p&gt;他依照原本設計的SOP進行升級後，如沒有意外的話，這篇文章也就不會出現了…
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;通訊群組內通知大家升級完成，期望的美好未來沒有發生，團隊陸續回報了下列問題&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ssh: connect to host gitlab.xxxx.net port 8022: Connection refused&lt;/li&gt;
  &lt;li&gt;Internal 500 Error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因為事態嚴重，全公司十多個團隊同時發生，所以趕快進行降版復原&lt;/p&gt;

&lt;p&gt;但這不是一個童話故事，惡夢並未在降版後就結束了，這是成人世界殘酷的現實…&lt;/p&gt;

&lt;h2 id=&quot;降版失敗&quot;&gt;降版失敗&lt;/h2&gt;

&lt;p&gt;降版後，回報的問題不見了，但取而代之的是AD驗證失敗&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
Could not authenticate you from Ldapmain because &quot;Pg::undefinedcolumn: error: column namespaces.deleted at does not exist line 1: ...s&quot; where (&quot;namespaces&quot;.&quot;name&quot; = 'jxxxx.xxxx' and &quot;namespace... ^ : select 1 as one from &quot;namespaces&quot; where (&quot;namespaces&quot;.&quot;name&quot; = 'jxxxx.xxxx' and &quot;namespaces&quot;.&quot;deleted at&quot; is null and &quot;namespaces&quot;.&quot;id&quot; != xx and &quot;namespaces&quot;.&quot;parent id&quot; is null) limit 1&quot;.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;對，降版失敗! 雖然同事在升級前有備份完整的設定檔，但還原後確發生了其他的問題，懷疑是Gitlab內部在某一版後變更了DB的schema。 由於狀況愈來愈嚴重，跟執行更新的同事討論後，決定再次升級回10.7.1，讓所有團隊可以先建置要部署到QAT的package。&lt;/p&gt;

&lt;p&gt;開弓沒有回頭路，我們只能嘗試看看能不能找到解決方法。&lt;/p&gt;

&lt;h2 id=&quot;問題排查&quot;&gt;問題排查&lt;/h2&gt;

&lt;p&gt;回到10.7.1後，一開始團隊回報正常，原本以為人品爆發，GitLab恢復正常了，但沒多久開始有人回報這個錯誤&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
fatal: The remote end hung up unexpectedly
error: RPC failed; HTTP 500 curl 22 The requested URL returned error: 500 Internal Server Error
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下來沒多久，Internal 500 ERROR也跟著出現，嘗試著重啟服務後又正常一陣子，但約20分鐘後這個狀況就會重覆發生。我們開始逐一清查可疑的部份，這段期間就委曲團隊只能用20分鐘，然後重啟服務。&lt;/p&gt;

&lt;p&gt;在檢查了很多部份後，注意到一個錯誤訊息非常可疑&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
time=&quot;2018-04-27T07:42:48Z&quot; level=fatal error=&quot;Failed to bind mount /var/opt/gitlab/gitlab-rails/shared/pages on /tmp/gitlab-pages-1524814968737227221/pages. operation not permitted&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我查了一下GitLab官方的issue列表，發現在5天前有人在10.7.0回報這個&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-pages/issues/129&quot;&gt;issue&lt;/a&gt;，我仔細的讀了整個討論串，確定這個issue在10.7.1並未被修正，也有其他網友提出了workaround，就是把GitLab Page先disabled。&lt;/p&gt;

&lt;p&gt;剛好我們之前在建置GitLab時也沒有用到這個功能，所以趕緊在gitlab.rb將Page關閉，然後重啟服務。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
gitlab_pages['enable'] = false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在重啟服務後，各團隊陸續回報功能已正常，但還是有一個問題回報，就是我們用來跟Jenkins做CI整合的Webhook還是壞的。&lt;/p&gt;

&lt;p&gt;到GitLab的Webhook頁面按下Push測試，依然會出現500 ERROR的錯誤頁面，研判可能不是同一個問題(&lt;code class=&quot;highlighter-rouge&quot;&gt;後續解釋第一個問題時，就會知道為什麼我會判斷不是同一個問題&lt;/code&gt;)，上網google了一下，原來是在10.5.6版時對Outbound Request新增了一個設定，用Admin的權限登入設定後，團隊回報功能正常，終於結束這個GitLab升級事件。&lt;/p&gt;

&lt;h2 id=&quot;問題原因分析&quot;&gt;問題原因分析&lt;/h2&gt;

&lt;p&gt;這次的主要問題是升級後的500 ERROR，雖然source code不用擔心會掉，但還是造成很大的不便。&lt;/p&gt;

&lt;p&gt;根據GitLab的開發人員解釋，這個問題跟Docker有關係，然後我們剛好就是用官方的Omnibus Docker image建置GitLab。&lt;/p&gt;

&lt;p&gt;GitLab有一個Page功能，就像是GitHub的Page一樣，用來建置靜態網站，因為這功能會佔用較多磁碟空間，原本是用in-place的方式在Docker內部調用chroot掛載外部Volume&lt;/p&gt;

&lt;p&gt;在10.7.0改版後，改成用bind mounting的方式來掛載外部Volume，這對privileged container來說是比較方便的，但&lt;strong&gt;同時他們也移掉了舊版的in-place方式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;問題來了，我們用的官方Omnibus docker image是以Unprivileged 的方式發行，意味著裡面的user不具備外部環境的root權限，所以沒辦法在container內直接使用bind mounting的方式掛載外部的volume，只能用chroot&lt;/p&gt;

&lt;p&gt;但因為我們其實沒有開啟GitLab Page的功能，所以直接在參數內關閉Page，繞過了這個issue&lt;/p&gt;

&lt;p&gt;官方說這應該要變成一個新功能，提供一個設定值讓使用者決定要用新版的做法還是舊版的，然後default要用舊版的設定，承諾會在之後修正，但不會在10.7.1&lt;/p&gt;

&lt;h2 id=&quot;回顧檢討&quot;&gt;回顧檢討&lt;/h2&gt;

&lt;p&gt;其實之前一樣的版本升級也做過幾次，但第一次出現這麼嚴重的狀況，因此也暴露出了一些問題。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;現有的備份機制做的不太好，應該要有一個能手動進行備份的腳本&lt;/li&gt;
  &lt;li&gt;版本更新一次跳太多版，還挑了一個才發行5天的release&lt;/li&gt;
  &lt;li&gt;應該先確認各版本的已知issue後才決定要更新到哪一個版本&lt;/li&gt;
  &lt;li&gt;沒有環境驗證更新後的結果，等於是直接拿production開刀&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jed Lin</name></author><category term="GitLab" /><category term="Upgrade" /><category term="Docker" /><summary type="html">Gitlab 10.3.3 EE 更新 10.7.1 EE的問題 升版失敗 某同事在某一天星期五上午，提早到了公司，依原先的計畫要宰殺升級全部團隊共用的Gitlab Server到最新的10.7.1。 他依照原本設計的SOP進行升級後，如沒有意外的話，這篇文章也就不會出現了…</summary></entry><entry><title type="html">學習敏捷系列 - Daily Scrum</title><link href="http://localhost:4000/2018/01/20/Agile-Scrum-Ceremonies-DailyScrum.html" rel="alternate" type="text/html" title="學習敏捷系列 - Daily Scrum" /><published>2018-01-20T00:00:00+08:00</published><updated>2018-01-20T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/20/Agile-Scrum-Ceremonies-DailyScrum</id><content type="html" xml:base="http://localhost:4000/2018/01/20/Agile-Scrum-Ceremonies-DailyScrum.html">&lt;p&gt;我參與過很多次的傳統瀑布流專案進度匯報會議，不帶杯咖啡進去真的很容易睡著，還好現在有了智慧型手機可以刷FB…(大誤)。&lt;/p&gt;

&lt;p&gt;以我的理解，專案進度匯報會議是比較偏單向的，資訊從一方流向另一方：讓團隊或PM(或PM的老闆)得到最新訊息，接下來PM(或PM的老闆…XD)可能會依專案的狀態進行一些工作項目跟資源上的調度，目的是控制好專案進度，以免造成延遲。&lt;/p&gt;

&lt;p&gt;但Daily Scrum的本質不太一樣，我傾向這樣描述它：
&lt;!--more--&gt;
類似系統開機時的自檢，緊接著載入要執行的工作項目，並檢視周邊支援設備是否有異常，如有則必須優先排除以讓工作順利進行。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;從上一次Daily Scrum到現在我做了什麼?&lt;/li&gt;
  &lt;li&gt;接下來我要做什麼?&lt;/li&gt;
  &lt;li&gt;我遇到了什麼障礙無法前進?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這3個問題形成了一個大致上以天為單位的Feedback loop。藉由頻繁的系統自檢，如果整個開發工作出了問題，比較容易地在問題發生初期就解決它。&lt;/p&gt;

&lt;p&gt;舉例來說：負責需求分析的同事認為他前一天承諾的工作已經結束可以進行下一個需求分析，但另一個準備接手開發的同事並不是這樣想的，他還需要釐清一些細節，而這些細節必須有另一位同事協助。在Daily Scrum短短的15分鐘裡充分揭露這些資訊，就能在結束後進行有效的後續討論。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;call for help + I can help + I’m interested + something is different from our expected
-Joey 91 replied in FB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2018.1.20 以上是我原本發在FB的一篇感想文，之後在準備內訓教材時，覺得有些值得補充的地方，所以整理成這篇文章發在部落格。(話說好久沒發文了…XD)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;以積極的個人來建構專案，給予他們所需的環境與支援，並信任他們可以完成工作。&lt;/li&gt;
    &lt;li&gt;面對面的溝通是傳遞資訊給開發團隊及團隊成員之間效率最高且效果最佳的方法。&lt;/li&gt;
    &lt;li&gt;團隊定期自省如何更有效率，並據之適當地調整與修正自己的行為。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;這是12條敏捷宣言中的其中3條，Daily Scrum不就正好對應到這3條原則嗎? 對管理層來說，專案的Transparency很重要，故專案管理的手段常見定期的團隊專案進度匯報會議，但以敏捷的精神來說，Daily Scrum無疑是更靈活的方式，而且不僅僅如此，如同91在FB的回應，團隊成員會逐漸學習到承諾、責任與互相信任，從Working Group昇華成為真正意義上的Team。&lt;/p&gt;

&lt;p&gt;學習敏捷只看具體實踐常會讓人感到困惑，唯有深入原則與價值觀才能真正理解與認同敏捷。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.rawgit.com/jed1978/blog-images/55333eee/agile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Jed Lin</name></author><category term="Agile" /><category term="Scrum" /><category term="Daily Scrum" /><summary type="html">我參與過很多次的傳統瀑布流專案進度匯報會議，不帶杯咖啡進去真的很容易睡著，還好現在有了智慧型手機可以刷FB…(大誤)。 以我的理解，專案進度匯報會議是比較偏單向的，資訊從一方流向另一方：讓團隊或PM(或PM的老闆)得到最新訊息，接下來PM(或PM的老闆…XD)可能會依專案的狀態進行一些工作項目跟資源上的調度，目的是控制好專案進度，以免造成延遲。 但Daily Scrum的本質不太一樣，我傾向這樣描述它：</summary></entry></feed>